# --- Импорты ---
# Подключаем pandas для удобной работы с данными. Мы даем ему короткое имя 'pd'.
import pandas as pd
from typing import List, Optional

# --- Основной Класс ---
class TechnicalAnalyzer:
    """
    Этот класс отвечает за вычисление технических индикаторов на основе рыночных данных.
    Технические индикаторы - это математические расчеты, основанные на исторических ценах,
    объемах или других данных, которые помогают трейдерам принимать решения.
    """

    def calculate_rsi(self, prices: List[float], period: int = 14) -> Optional[float]:
        """
        Вычисляет Индекс Относительной Силы (RSI).
        RSI - это осциллятор моментума, который измеряет скорость и изменение ценовых движений.
        Он колеблется от 0 до 100.
        - Значение выше 70 обычно указывает на перекупленность актива.
        - Значение ниже 30 обычно указывает на перепроданность актива.

        :param prices: Список цен закрытия (например, за последние 20 дней).
        :param period: Период для расчета RSI. Стандартное значение - 14.
        :return: Последнее значение RSI (число с плавающей точкой) или None, если данных недостаточно.
        """
        # Проверяем, достаточно ли у нас данных для расчета. Нам нужно хотя бы на 1 цену больше, чем период.
        if len(prices) < period + 1:
            print("Ошибка: недостаточно данных для расчета RSI.")
            return None # Возвращаем None, если данных мало

        # Преобразуем наш обычный список Python в объект Pandas Series.
        # Series - это как один столбец в таблице. С ним гораздо удобнее делать вычисления.
        price_series = pd.Series(prices)

        # 1. Рассчитываем изменение цены между каждым днем.
        # .diff(1) вычитает из каждой цены предыдущую. Первая цена даст NaN (Not a Number), т.к. нет предыдущей.
        delta = price_series.diff(1)

        # 2. Разделяем изменения на "прирост" (gain) и "убыток" (loss).
        # .clip(lower=0) заменяет все отрицательные числа на 0. Так мы получаем только приросты.
        gain = delta.clip(lower=0)
        # Умножаем на -1 и снова clip, чтобы получить положительные значения убытков.
        loss = -delta.clip(upper=0)

        # 3. Считаем средний прирост и средний убыток за указанный период.
        # .ewm() - это Экспоненциально взвешенное скользящее среднее. Оно придает больший вес
        # последним данным, что делает индикатор более отзывчивым.
        avg_gain = gain.ewm(com=period - 1, min_periods=period).mean()
        avg_loss = loss.ewm(com=period - 1, min_periods=period).mean()

        # 4. Рассчитываем Относительную Силу (RS).
        # Если средний убыток равен 0, это может привести к делению на ноль.
        # В таком случае RSI должен быть 100 (цена только росла).
        if avg_loss.iloc[-1] == 0:
            return 100.0
        
        rs = avg_gain / avg_loss

        # 5. Вычисляем сам RSI по формуле.
        rsi = 100 - (100 / (1 + rs))

        # Возвращаем последнее (самое свежее) значение RSI, округленное до 2 знаков после запятой.
        # .iloc[-1] означает "взять последний элемент" из нашего ряда данных.
        return round(rsi.iloc[-1], 2)

# --- Демонстрация работы класса ---
if __name__ == '__main__':
    # Создаем экземпляр нашего анализатора
    analyzer = TechnicalAnalyzer()
    
    # Создаем тестовый набор цен.
    # Представим, что это цены закрытия акции за 15 дней.
    sample_prices = [
        44.34, 44.09, 44.15, 43.61, 44.33, 44.83, 45.10, 45.42, 45.84, 46.08,
        45.89, 46.03, 45.61, 46.28, 46.28
    ]

    print(f"Тестовые цены (15 дней): {sample_prices}")
    
    # Вызываем наш метод для расчета RSI
    rsi_value = analyzer.calculate_rsi(sample_prices, period=14)
    
    if rsi_value is not None:
        print(f"\nРассчитанный RSI (период 14): {rsi_value}")